/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.68
 * Generated at: 2022-12-02 03:53:39 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.board;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class insertBoard_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>리뷰 쓰기</title>\r\n");
      out.write("<style>\r\n");
      out.write("	 #container { width: 800px; margin: 0 auto; padding-top: 30px; padding-bottom: 100px;}\r\n");
      out.write("	 #boardCate { width: 15%; height: 28px; margin-bottom: 10px;}\r\n");
      out.write("	 select option[value=\"\"][disabled] {\r\n");
      out.write("	   display: none;\r\n");
      out.write("	 }\r\n");
      out.write("	 #boardTitle { margin-bottom: 10px; width:100%; height: 30px; border-width: 0 0 1px 0; font-size: 18px;}\r\n");
      out.write("	 #userId input[type=text] { border: none; font-size: 17px;}\r\n");
      out.write("	 #uploadFile { margin-top:8px;}\r\n");
      out.write("	 #boardStar { margin-bottom: 10px;}\r\n");
      out.write("	 #insertForm>#boardStar {\r\n");
      out.write("	     display: inline-block;\r\n");
      out.write("	     direction: rtl;\r\n");
      out.write("	     border:0;\r\n");
      out.write("	 }\r\n");
      out.write("	 #insertForm input[type=radio]{\r\n");
      out.write("	     display: none;\r\n");
      out.write("	 }\r\n");
      out.write("	 #insertForm>#boardStar label{\r\n");
      out.write("	     font-size: 1.8em;\r\n");
      out.write("	     color: transparent;\r\n");
      out.write("	     text-shadow: 0 0 0 #f0f0f0;\r\n");
      out.write("	 }\r\n");
      out.write("	 #insertForm>#boardStar label:hover{\r\n");
      out.write("	     text-shadow: 0 0 0 rgba(250, 208, 0, 0.99);\r\n");
      out.write("	 }\r\n");
      out.write("	 #insertForm>#boardStar label:hover ~ label{\r\n");
      out.write("	     text-shadow: 0 0 0 rgba(250, 208, 0, 0.99);\r\n");
      out.write("	 }\r\n");
      out.write("	 #insertForm>#boardStar input[type=radio]:checked ~ label{\r\n");
      out.write("	     text-shadow: 0 0 0 rgba(250, 208, 0, 0.99);\r\n");
      out.write("	 }\r\n");
      out.write("	 #boardMain { margin-bottom: 5px;}\r\n");
      out.write("	 #btns { margin: 10px;}\r\n");
      out.write("	 #btns>button { width: 80px; height: 30px; font-size: 18px;}\r\n");
      out.write("	 #btnList { float: left;}\r\n");
      out.write("     #btnDone { float: right;}\r\n");
      out.write("     #btnCancel { float: right; margin-right: 10px;}\r\n");
      out.write("     #image_preview { margin-bottom: 5px;}\r\n");
      out.write(" 	\r\n");
      out.write(" 	.map_wrap, .map_wrap * {margin:0;padding:0;font-family:'Malgun Gothic',dotum,'돋움',sans-serif;font-size:12px;}\r\n");
      out.write("	.map_wrap a, .map_wrap a:hover, .map_wrap a:active{color:#000;text-decoration: none;}\r\n");
      out.write("	.map_wrap {position:relative;width:70%;height:300px;}\r\n");
      out.write("	#menu_wrap {position:absolute;top:0;left:0;bottom:0;width:250px;margin:10px 0 30px 10px;padding:5px;overflow-y:auto;background:rgba(255, 255, 255, 0.7);z-index: 1;font-size:12px;border-radius: 10px;}\r\n");
      out.write("	.bg_white {background:#fff;}\r\n");
      out.write("	#menu_wrap hr {display: block; height: 1px;border: 0; border-top: 2px solid #5F5F5F;margin:3px 0;}\r\n");
      out.write("	#menu_wrap .option{text-align: center;}\r\n");
      out.write("	#menu_wrap .option p {margin:10px 0;}  \r\n");
      out.write("	#menu_wrap .option button {margin-left:5px;}\r\n");
      out.write("	#placesList li {list-style: none;}\r\n");
      out.write("	#placesList .item {position:relative;border-bottom:1px solid #888;overflow: hidden;cursor: pointer;min-height: 65px;}\r\n");
      out.write("	#placesList .item span {display: block;margin-top:4px;}\r\n");
      out.write("	#placesList .item h5, #placesList .item .info {text-overflow: ellipsis;overflow: hidden;white-space: nowrap;}\r\n");
      out.write("	#placesList .item .info{padding:10px 0 10px 55px;}\r\n");
      out.write("	#placesList .info .gray {color:#8a8a8a;}\r\n");
      out.write("	#placesList .info .jibun {padding-left:26px;background:url(https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/places_jibun.png) no-repeat;}\r\n");
      out.write("	#placesList .info .tel {color:#009900;}\r\n");
      out.write("	#placesList .item .markerbg {float:left;position:absolute;width:36px; height:37px;margin:10px 0 0 10px;background:url(https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/marker_number_blue.png) no-repeat;}\r\n");
      out.write("	#placesList .item .marker_1 {background-position: 0 -10px;}\r\n");
      out.write("	#placesList .item .marker_2 {background-position: 0 -56px;}\r\n");
      out.write("	#placesList .item .marker_3 {background-position: 0 -102px}\r\n");
      out.write("	#placesList .item .marker_4 {background-position: 0 -148px;}\r\n");
      out.write("	#placesList .item .marker_5 {background-position: 0 -194px;}\r\n");
      out.write("	#placesList .item .marker_6 {background-position: 0 -240px;}\r\n");
      out.write("	#placesList .item .marker_7 {background-position: 0 -286px;}\r\n");
      out.write("	#placesList .item .marker_8 {background-position: 0 -332px;}\r\n");
      out.write("	#placesList .item .marker_9 {background-position: 0 -378px;}\r\n");
      out.write("	#placesList .item .marker_10 {background-position: 0 -423px;}\r\n");
      out.write("	#placesList .item .marker_11 {background-position: 0 -470px;}\r\n");
      out.write("	#placesList .item .marker_12 {background-position: 0 -516px;}\r\n");
      out.write("	#placesList .item .marker_13 {background-position: 0 -562px;}\r\n");
      out.write("	#placesList .item .marker_14 {background-position: 0 -608px;}\r\n");
      out.write("	#placesList .item .marker_15 {background-position: 0 -654px;}\r\n");
      out.write("	#pagination {margin:10px auto;text-align: center;}\r\n");
      out.write("	#pagination a {display:inline-block;margin-right:10px;}\r\n");
      out.write("	#pagination .on {font-weight: bold; cursor: default;color:#777;}\r\n");
      out.write("</style>\r\n");
      out.write("<script src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/js/jquery-3.6.1.min.js\"></script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, (java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath }/header.jsp", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null), out, false);
      out.write("\r\n");
      out.write("<div id=\"container\">\r\n");
      out.write("\r\n");
      out.write("	<h3>리뷰 쓰기</h3>\r\n");
      out.write("	<form name=\"insertForm\" id=\"insertForm\" action=\"/board/insertBoard.do\" method=\"post\" enctype=\"multipart/form-data\">\r\n");
      out.write("		<input type=\"hidden\" name=\"placeTitle\" id=\"placeTitle\">\r\n");
      out.write("		<input type=\"hidden\" name=\"boardCatecd\" id=\"boardCatecd\">\r\n");
      out.write("		<select name=\"boardCate\" id=\"boardCate\" required>\r\n");
      out.write("			<option value=\"\" disabled selected>CATEGORY</option>\r\n");
      out.write("			<option value=\"0\" disabled>NOTICE</option>\r\n");
      out.write("			<option value=\"1\">HOTELS</option>\r\n");
      out.write("			<option value=\"2\">DESSERT</option>\r\n");
      out.write("			<option value=\"3\">BARS&amp;PUBS</option>\r\n");
      out.write("			<option value=\"4\">RESTAURANT</option>\r\n");
      out.write("		</select><br>\r\n");
      out.write("		<input type=\"text\" name=\"boardTitle\" id=\"boardTitle\" placeholder=\"제목\"><br>\r\n");
      out.write("		<label for=\"userId\" id=\"userId\">작성자: </label><input type=\"text\" name=\"userId\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${loginUser.userId}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\" readonly><br>\r\n");
      out.write("		<div id=\"boardStar\">\r\n");
      out.write("			<span class=\"text-bold\">별점을 선택해주세요</span>\r\n");
      out.write("			<input type=\"radio\" name=\"boardStar\" value=\"5\" id=\"rate5\"><label for=\"rate5\">★</label>\r\n");
      out.write("			<input type=\"radio\" name=\"boardStar\" value=\"4\" id=\"rate4\"><label for=\"rate4\">★</label>\r\n");
      out.write("			<input type=\"radio\" name=\"boardStar\" value=\"3\" id=\"rate3\"><label for=\"rate3\">★</label>\r\n");
      out.write("			<input type=\"radio\" name=\"boardStar\" value=\"2\" id=\"rate2\"><label for=\"rate2\">★</label>\r\n");
      out.write("			<input type=\"radio\" name=\"boardStar\" value=\"1\" id=\"rate1\"><label for=\"rate1\">★</label>\r\n");
      out.write("		</div>\r\n");
      out.write("		<textarea name=\"boardMain\" id=\"boardMain\" cols=\"116\" rows=\"30\"></textarea>\r\n");
      out.write("		<div id=\"image_preview\">\r\n");
      out.write("			<input type=\"file\" name=\"uploadFiles\" id=\"btnAtt\" multiple=\"multiple\">\r\n");
      out.write("			<div id=\"attZone\" data-placeholder=\"파일선택 버튼을 눌러 파일을 첨부하세요.\"></div>\r\n");
      out.write("		</div>\r\n");
      out.write("		<div class=\"map_wrap\">\r\n");
      out.write("		    <div id=\"map\" style=\"width:100%; height:100%; position:relative; overflow:hidden;\"></div>\r\n");
      out.write("		\r\n");
      out.write("		    <div id=\"menu_wrap\" class=\"bg_white\">\r\n");
      out.write("		        <div class=\"option\">\r\n");
      out.write("		            <div>\r\n");
      out.write("		                <div>\r\n");
      out.write("		                	<input type=\"hidden\" name=\"boardAddr\" id=\"boardAddr\" value=\"\">\r\n");
      out.write("		                    상호명 : <input type=\"text\" id=\"keyword\" size=\"15\"> \r\n");
      out.write("		                    <button type=\"button\" onclick=\"searchPlaces(); return false;\">검색하기</button> \r\n");
      out.write("		                </div>\r\n");
      out.write("		            </div>\r\n");
      out.write("		        </div>\r\n");
      out.write("		        <hr>\r\n");
      out.write("		        <ul id=\"placesList\"></ul>\r\n");
      out.write("		        <div id=\"pagination\"></div>\r\n");
      out.write("		    </div>\r\n");
      out.write("		</div>\r\n");
      out.write("		<div id=\"btns\">\r\n");
      out.write("			<button type=\"button\" id=\"btnList\" onclick=\"location.href='/board/getBoardList.do'\">목록</button>\r\n");
      out.write("			<button type=\"submit\" id=\"btnDone\">등록</button>\r\n");
      out.write("			<button type=\"button\" id=\"btnCancel\" onclick=\"history.back();\">취소</button>\r\n");
      out.write("		</div>\r\n");
      out.write("	</form>\r\n");
      out.write("</div>\r\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, (java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath }/footer.jsp", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null), out, false);
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("	// 추가된 파일들을 담아줄 배열. File 객체로 하나씩 담음\r\n");
      out.write("	let uploadFiles = [];\r\n");
      out.write("	\r\n");
      out.write("	$(function() {\r\n");
      out.write("		// input type=\"file\"이 변경되면 미리보기 동작\r\n");
      out.write("		$(\"#btnAtt\").on(\"change\", function(e) {\r\n");
      out.write("			// input type=\"file\"에 추가된 파일들을 변수로 받아옴\r\n");
      out.write("			const files = e.target.files;\r\n");
      out.write("			// 변수로 받아온 파일들을 배열 형태로 변환\r\n");
      out.write("			const fileArr = Array.prototype.slice.call(files);\r\n");
      out.write("			\r\n");
      out.write("			// 배열에 있는 파일들을 하나씩 꺼내서 처리\r\n");
      out.write("			for(f of fileArr) {\r\n");
      out.write("				imageLoader(f);\r\n");
      out.write("			}\r\n");
      out.write("	\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("		$(\"#insertForm\").on(\"submit\", function(e) {\r\n");
      out.write("			\r\n");
      out.write("			// 마지막으로 btnAtt에 uploadFiles에 있는 파일들을 담아준다.\r\n");
      out.write("			dt = new DataTransfer();\r\n");
      out.write("			\r\n");
      out.write("			for(f in uploadFiles) {\r\n");
      out.write("				const file = uploadFiles[f];\r\n");
      out.write("				dt.items.add(file);\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("			$(\"#btnAtt\")[0].files = dt.files;\r\n");
      out.write("\r\n");
      out.write("			// boardCate value값을 boardCatecd로 전달\r\n");
      out.write("			const boardCatecd = $(\"#boardCate\").val();\r\n");
      out.write("			\r\n");
      out.write("			switch(boardCatecd) {\r\n");
      out.write("			case 'HOTELS' :\r\n");
      out.write("					$(\"#boardCatecd\").val(1);\r\n");
      out.write("					break;\r\n");
      out.write("			case 'DESSERT' :\r\n");
      out.write("					$(\"#boardCatecd\").val(2);\r\n");
      out.write("					break;\r\n");
      out.write("			case 'BARS&amp;PUBS' :\r\n");
      out.write("					$(\"#boardCatecd\").val(3);\r\n");
      out.write("					break;\r\n");
      out.write("			case 'RESTAURANT' :\r\n");
      out.write("					$(\"#boardCatecd\").val(4);\r\n");
      out.write("					break;\r\n");
      out.write("			default :\r\n");
      out.write("					$(\"#boardCatecd\").val(0);\r\n");
      out.write("					break;\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("	});\r\n");
      out.write("	\r\n");
      out.write("	// 미리보기 영역에 들어갈 img태그 생성 및 선택된 파일을 Base64 인코딩된 문자열 형태로 미리보기 가능하게 해줌\r\n");
      out.write("	function imageLoader(file) {\r\n");
      out.write("		uploadFiles.push(file);\r\n");
      out.write("		\r\n");
      out.write("		const reader = new FileReader();\r\n");
      out.write("		\r\n");
      out.write("		reader.onload = function(e) {\r\n");
      out.write("			// 이미지를 표출해 줄 img태크 선언\r\n");
      out.write("			let img = document.createElement(\"img\");\r\n");
      out.write("			img.setAttribute(\"style\", \"width: 100%; height: 100%; z-index: none;\");\r\n");
      out.write("			\r\n");
      out.write("			// 이미지 파일인지 아닌지 체크\r\n");
      out.write("			if(file.name.toLowerCase().match(/(.*?)\\.(jpg|jpeg|png|gif|svg|bmp)$/)) {\r\n");
      out.write("				// 이미지 파일 미리보기 처리\r\n");
      out.write("				img.src = e.target.result;				\r\n");
      out.write("			} else {\r\n");
      out.write("				// 일반 파일 미리보기 처리\r\n");
      out.write("				img.src = \"/images/defaultFileImg.png\";\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("			// 미리보기 영역에 추가\r\n");
      out.write("			// 미리보기 이미지 태그와 삭제 버튼, 파일명을 표출하는 p태그를 묶어주는 div를 만들어 미리보기 영역에 추가\r\n");
      out.write("			$(\"#attZone\").append(makeDiv(img, file));\r\n");
      out.write("		};\r\n");
      out.write("		\r\n");
      out.write("		// 파일을 Base64 인코딩된 문자열로 변경\r\n");
      out.write("		reader.readAsDataURL(file);\r\n");
      out.write("	};\r\n");
      out.write("	\r\n");
      out.write("	// 미리보기 영역에 들어갈 div(img + button + p)를 생성하고 리턴\r\n");
      out.write("	function makeDiv(img, file) {\r\n");
      out.write("		// div 생성\r\n");
      out.write("		let div = document.createElement(\"div\");\r\n");
      out.write("		div.setAttribute(\"style\", \"display: inline-block; position: relative;\"\r\n");
      out.write("		 + \" width: 150px; height: 120px; margin: 5px; border: 1px solid #848484; z-index: 1;\");\r\n");
      out.write("		\r\n");
      out.write("		// button 생성\r\n");
      out.write("		let btn = document.createElement(\"input\");\r\n");
      out.write("		btn.setAttribute(\"type\", \"button\");\r\n");
      out.write("		btn.setAttribute(\"value\", \"x\");\r\n");
      out.write("		btn.setAttribute(\"delFile\", file.name);\r\n");
      out.write("		btn.setAttribute(\"style\", \"width: 30px; height: 30px; position: absolute;\"\r\n");
      out.write("		+ \" right: 0px; bottom: 0px; z-index: 999; background-color: rgba(255, 255, 255, 0.1);\"\r\n");
      out.write("		+ \" color: #f00;\");\r\n");
      out.write("		\r\n");
      out.write("		// 버튼 클릭 이벤트\r\n");
      out.write("		// 버튼 클릭 시 해당 파일이 삭제되도록 설정\r\n");
      out.write("		btn.onclick = function(e) {\r\n");
      out.write("			// 클릭된 버튼\r\n");
      out.write("			const ele = e.srcElement;\r\n");
      out.write("			// delFile(파일이름) 속성 꺼내오기: 삭제될 파일명\r\n");
      out.write("			const delFile = ele.getAttribute(\"delFile\");\r\n");
      out.write("			\r\n");
      out.write("			for(let i = 0; i < uploadFiles.length; i++) {\r\n");
      out.write("				// 배열에 담아놓은 파일들 중에 해당 파일 삭제\r\n");
      out.write("				if(delFile == uploadFiles[i].name) {\r\n");
      out.write("					// 배열에서 i번째 한 개만 제거\r\n");
      out.write("					uploadFiles.splice(i, 1);\r\n");
      out.write("				}\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("			// 버튼 클릭 시 btnAtt에 첨부된 파일도 삭제\r\n");
      out.write("			// input type=file은 첨부된 파일들을 fileList 형태로 관리\r\n");
      out.write("			// fileList에 일반적인 File객체를 넣을 수 없고\r\n");
      out.write("			// DataTransfer라는 클래스를 이용하여 완전한 fileList 형태로 만들어서\r\n");
      out.write("			// input.files에 넣어줘야 된다.\r\n");
      out.write("			dt = new DataTransfer();\r\n");
      out.write("			\r\n");
      out.write("			for(f in uploadFiles) {\r\n");
      out.write("				const file = uploadFiles[f];\r\n");
      out.write("				dt.items.add(file);\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("			console.log($(\"#btnAtt\"));\r\n");
      out.write("			$(\"#btnAtt\")[0].files = dt.files;\r\n");
      out.write("			\r\n");
      out.write("			// 해당 img를 담고있는 부모태그인 div 삭제\r\n");
      out.write("			const parentDiv = ele.parentNode;\r\n");
      out.write("			$(parentDiv).remove();\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		// 파일명 표출할 p태그 생성\r\n");
      out.write("		const fName = document.createElement(\"p\");\r\n");
      out.write("		fName.setAttribute(\"style\", \"display: inline-block; font-size: 8px;\");\r\n");
      out.write("		fName.textContent = file.name;\r\n");
      out.write("		\r\n");
      out.write("		// div에 하나씩 추가\r\n");
      out.write("		div.appendChild(img);\r\n");
      out.write("		div.appendChild(btn);\r\n");
      out.write("		div.appendChild(fName);\r\n");
      out.write("		\r\n");
      out.write("		// 완성된 div 리턴\r\n");
      out.write("		return div;\r\n");
      out.write("	}\r\n");
      out.write("</script>\r\n");
      out.write("<script type=\"text/javascript\" src=\"//dapi.kakao.com/v2/maps/sdk.js?appkey=74dadd665477bb479ae9a0d793b563cd&libraries=services\"></script>\r\n");
      out.write("<script>\r\n");
      out.write("	//현재 위치 좌표\r\n");
      out.write("	let latitude;\r\n");
      out.write("	let longitude;\r\n");
      out.write("	\r\n");
      out.write("	getUserLocation();\r\n");
      out.write("	\r\n");
      out.write("	// 마커를 담을 배열입니다\r\n");
      out.write("	var markers = [];\r\n");
      out.write("	\r\n");
      out.write("	var mapContainer = document.getElementById('map'), // 지도를 표시할 div \r\n");
      out.write("	    mapOption = {\r\n");
      out.write("	        center: new kakao.maps.LatLng(37.566826, 126.9786567), // 지도의 중심좌표\r\n");
      out.write("	        level: 3 // 지도의 확대 레벨\r\n");
      out.write("	    };  \r\n");
      out.write("	\r\n");
      out.write("	// 지도를 생성합니다    \r\n");
      out.write("	var map = new kakao.maps.Map(mapContainer, mapOption); \r\n");
      out.write("	\r\n");
      out.write("	// 장소 검색 객체를 생성합니다\r\n");
      out.write("	var ps = new kakao.maps.services.Places();  \r\n");
      out.write("	\r\n");
      out.write("	// 검색 결과 목록이나 마커를 클릭했을 때 장소명을 표출할 인포윈도우를 생성합니다\r\n");
      out.write("	var infowindow = new kakao.maps.InfoWindow({zIndex:1});\r\n");
      out.write("	\r\n");
      out.write("	// 키워드로 장소를 검색합니다\r\n");
      out.write("	searchPlaces();\r\n");
      out.write("	\r\n");
      out.write("	// 키워드 검색을 요청하는 함수입니다\r\n");
      out.write("	function searchPlaces() {\r\n");
      out.write("	\r\n");
      out.write("	    var keyword = document.getElementById('keyword').value;\r\n");
      out.write("	\r\n");
      out.write("	    /* if (!keyword.replace(/^\\s+|\\s+$/g, '')) {\r\n");
      out.write("	        alert('상호명을 입력해주세요!');\r\n");
      out.write("	        return false;\r\n");
      out.write("	    } */\r\n");
      out.write("	\r\n");
      out.write("	    // 장소검색 객체를 통해 키워드로 장소검색을 요청합니다\r\n");
      out.write("	    ps.keywordSearch( keyword, placesSearchCB); \r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	// 장소검색이 완료됐을 때 호출되는 콜백함수 입니다\r\n");
      out.write("	function placesSearchCB(data, status, pagination) {\r\n");
      out.write("	    if (status === kakao.maps.services.Status.OK) {\r\n");
      out.write("	\r\n");
      out.write("	        // 정상적으로 검색이 완료됐으면\r\n");
      out.write("	        // 검색 목록과 마커를 표출합니다\r\n");
      out.write("	        displayPlaces(data);\r\n");
      out.write("	\r\n");
      out.write("	        // 페이지 번호를 표출합니다\r\n");
      out.write("	        displayPagination(pagination);\r\n");
      out.write("	\r\n");
      out.write("	    } else if (status === kakao.maps.services.Status.ZERO_RESULT) {\r\n");
      out.write("	\r\n");
      out.write("	        alert('검색 결과가 존재하지 않습니다.');\r\n");
      out.write("	        return;\r\n");
      out.write("	\r\n");
      out.write("	    } else if (status === kakao.maps.services.Status.ERROR) {\r\n");
      out.write("	\r\n");
      out.write("	        alert('검색 결과 중 오류가 발생했습니다.');\r\n");
      out.write("	        return;\r\n");
      out.write("	\r\n");
      out.write("	    }\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	// 검색 결과 목록과 마커를 표출하는 함수입니다\r\n");
      out.write("	function displayPlaces(places) {\r\n");
      out.write("	\r\n");
      out.write("	    var listEl = document.getElementById('placesList'), \r\n");
      out.write("	    menuEl = document.getElementById('menu_wrap'),\r\n");
      out.write("	    fragment = document.createDocumentFragment(), \r\n");
      out.write("	    bounds = new kakao.maps.LatLngBounds(), \r\n");
      out.write("	    listStr = '';\r\n");
      out.write("	    \r\n");
      out.write("	    // 검색 결과 목록에 추가된 항목들을 제거합니다\r\n");
      out.write("	    removeAllChildNods(listEl);\r\n");
      out.write("	\r\n");
      out.write("	    // 지도에 표시되고 있는 마커를 제거합니다\r\n");
      out.write("	    removeMarker();\r\n");
      out.write("	    \r\n");
      out.write("	    for ( var i=0; i<places.length; i++ ) {\r\n");
      out.write("	\r\n");
      out.write("	        // 마커를 생성하고 지도에 표시합니다\r\n");
      out.write("	        var placePosition = new kakao.maps.LatLng(places[i].y, places[i].x),\r\n");
      out.write("	            marker = addMarker(placePosition, i), \r\n");
      out.write("	            itemEl = getListItem(i, places[i]); // 검색 결과 항목 Element를 생성합니다\r\n");
      out.write("	\r\n");
      out.write("	        // 검색된 장소 위치를 기준으로 지도 범위를 재설정하기위해\r\n");
      out.write("	        // LatLngBounds 객체에 좌표를 추가합니다\r\n");
      out.write("	        bounds.extend(placePosition);\r\n");
      out.write("	\r\n");
      out.write("	        // 마커와 검색결과 항목에 mouseover 했을때\r\n");
      out.write("	        // 해당 장소에 인포윈도우에 장소명을 표시합니다\r\n");
      out.write("	        // mouseout 했을 때는 인포윈도우를 닫습니다\r\n");
      out.write("	        (function(marker, title) {\r\n");
      out.write("	            kakao.maps.event.addListener(marker, 'mouseover', function() {\r\n");
      out.write("	                displayInfowindow(marker, title);\r\n");
      out.write("	            });\r\n");
      out.write("	\r\n");
      out.write("	            kakao.maps.event.addListener(marker, 'mouseout', function() {\r\n");
      out.write("	                infowindow.close();\r\n");
      out.write("	            });\r\n");
      out.write("	            \r\n");
      out.write("	            // 마커를 클릭했을 때 좌표 구하기 \r\n");
      out.write("	        	kakao.maps.event.addListener(marker, 'click', function (){\r\n");
      out.write("	        		var position = this.getPosition();\r\n");
      out.write("	        	    //console.log(position);\r\n");
      out.write("	        	    $(\"#placeTitle\").val(title);\r\n");
      out.write("	        	    kakao.maps.event.addListener(marker, 'mouseout', function() {\r\n");
      out.write("	                	displayInfowindow(marker, title);\r\n");
      out.write("	            	});\r\n");
      out.write("	        	    \r\n");
      out.write("	        	    // 좌표를 주소로 변환\r\n");
      out.write("	        	    var geocoder = new kakao.maps.services.Geocoder();\r\n");
      out.write("\r\n");
      out.write("	        	    var coord = position;\r\n");
      out.write("	        	    var callback = function(result, status) {\r\n");
      out.write("	        	        if (status === kakao.maps.services.Status.OK) {\r\n");
      out.write("	        	        	\r\n");
      out.write("	        	            console.log(result[0].road_address.address_name);\r\n");
      out.write("	        	            $(\"#boardAddr\").attr(\"value\", result[0].road_address.address_name);\r\n");
      out.write("	        	        }\r\n");
      out.write("	        	    };\r\n");
      out.write("\r\n");
      out.write("	        	    geocoder.coord2Address(coord.getLng(), coord.getLat(), callback);\r\n");
      out.write("	        	});\r\n");
      out.write("	\r\n");
      out.write("	            itemEl.onmouseover =  function () {\r\n");
      out.write("	                displayInfowindow(marker, title);\r\n");
      out.write("	            };\r\n");
      out.write("	\r\n");
      out.write("	            itemEl.onmouseout =  function () {\r\n");
      out.write("	                infowindow.close();\r\n");
      out.write("	            };\r\n");
      out.write("	        })(marker, places[i].place_name);\r\n");
      out.write("	\r\n");
      out.write("	        fragment.appendChild(itemEl);\r\n");
      out.write("	    }\r\n");
      out.write("	    \r\n");
      out.write("	\r\n");
      out.write("	    // 검색결과 항목들을 검색결과 목록 Element에 추가합니다\r\n");
      out.write("	    listEl.appendChild(fragment);\r\n");
      out.write("	    menuEl.scrollTop = 0;\r\n");
      out.write("	\r\n");
      out.write("	    // 검색된 장소 위치를 기준으로 지도 범위를 재설정합니다\r\n");
      out.write("	    map.setBounds(bounds);\r\n");
      out.write("	    //map.setCenter(new kakao.maps.LatLng(latitude, longitude));\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	// 검색결과 항목을 Element로 반환하는 함수입니다\r\n");
      out.write("	function getListItem(index, places) {\r\n");
      out.write("	\r\n");
      out.write("	    var el = document.createElement('li'),\r\n");
      out.write("	    itemStr = '<span class=\"markerbg marker_' + (index+1) + '\"></span>' +\r\n");
      out.write("	                '<div class=\"info\">' +\r\n");
      out.write("	                '   <h5>' + places.place_name + '</h5>';\r\n");
      out.write("	\r\n");
      out.write("	    if (places.road_address_name) {\r\n");
      out.write("	        itemStr += '    <span>' + places.road_address_name + '</span>' +\r\n");
      out.write("	                    '   <span class=\"jibun gray\">' +  places.address_name  + '</span>';\r\n");
      out.write("	    } else {\r\n");
      out.write("	        itemStr += '    <span>' +  places.address_name  + '</span>'; \r\n");
      out.write("	    }\r\n");
      out.write("	                 \r\n");
      out.write("	      itemStr += '  <span class=\"tel\">' + places.phone  + '</span>' +\r\n");
      out.write("	                '</div>';           \r\n");
      out.write("	\r\n");
      out.write("	    el.innerHTML = itemStr;\r\n");
      out.write("	    el.className = 'item';\r\n");
      out.write("	\r\n");
      out.write("	    return el;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	function success({ coords, timestamp }) {\r\n");
      out.write("        latitude = coords.latitude;   // 위도\r\n");
      out.write("        longitude = coords.longitude; // 경도\r\n");
      out.write("        \r\n");
      out.write("        //alert(`위도: ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${latitude}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(", 경도: ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${longitude}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(", 위치 반환 시간: ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${timestamp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("`);\r\n");
      out.write("        //location.href = `https://www.openstreetmap.org/#map=18/");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${latitude}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write('/');
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${longitude}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("`;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    function getUserLocation() {\r\n");
      out.write("        if (!navigator.geolocation) {\r\n");
      out.write("            throw \"위치 정보가 지원되지 않습니다.\";\r\n");
      out.write("        }\r\n");
      out.write("        navigator.geolocation.getCurrentPosition(success);\r\n");
      out.write("    }\r\n");
      out.write("	\r\n");
      out.write("	// 마커를 생성하고 지도 위에 마커를 표시하는 함수입니다\r\n");
      out.write("	function addMarker(position, idx, title) {\r\n");
      out.write("	    var imageSrc = 'https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/marker_number_blue.png', // 마커 이미지 url, 스프라이트 이미지를 씁니다\r\n");
      out.write("	        imageSize = new kakao.maps.Size(36, 37),  // 마커 이미지의 크기\r\n");
      out.write("	        imgOptions =  {\r\n");
      out.write("	            spriteSize : new kakao.maps.Size(36, 691), // 스프라이트 이미지의 크기\r\n");
      out.write("	            spriteOrigin : new kakao.maps.Point(0, (idx*46)+10), // 스프라이트 이미지 중 사용할 영역의 좌상단 좌표\r\n");
      out.write("	            offset: new kakao.maps.Point(13, 37) // 마커 좌표에 일치시킬 이미지 내에서의 좌표\r\n");
      out.write("	        },\r\n");
      out.write("	        markerImage = new kakao.maps.MarkerImage(imageSrc, imageSize, imgOptions),\r\n");
      out.write("	            marker = new kakao.maps.Marker({\r\n");
      out.write("	            position: position, // 마커의 위치\r\n");
      out.write("	            image: markerImage \r\n");
      out.write("	        });\r\n");
      out.write("	\r\n");
      out.write("	    marker.setMap(map); // 지도 위에 마커를 표출합니다\r\n");
      out.write("	    markers.push(marker);  // 배열에 생성된 마커를 추가합니다\r\n");
      out.write("	\r\n");
      out.write("	    return marker;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	// 지도 위에 표시되고 있는 마커를 모두 제거합니다\r\n");
      out.write("	function removeMarker() {\r\n");
      out.write("	    for ( var i = 0; i < markers.length; i++ ) {\r\n");
      out.write("	        markers[i].setMap(null);\r\n");
      out.write("	    }   \r\n");
      out.write("	    markers = [];\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	// 검색결과 목록 하단에 페이지번호를 표시는 함수입니다\r\n");
      out.write("	function displayPagination(pagination) {\r\n");
      out.write("	    var paginationEl = document.getElementById('pagination'),\r\n");
      out.write("	        fragment = document.createDocumentFragment(),\r\n");
      out.write("	        i; \r\n");
      out.write("	\r\n");
      out.write("	    // 기존에 추가된 페이지번호를 삭제합니다\r\n");
      out.write("	    while (paginationEl.hasChildNodes()) {\r\n");
      out.write("	        paginationEl.removeChild (paginationEl.lastChild);\r\n");
      out.write("	    }\r\n");
      out.write("	\r\n");
      out.write("	    for (i=1; i<=pagination.last; i++) {\r\n");
      out.write("	        var el = document.createElement('a');\r\n");
      out.write("	        el.href = \"#\";\r\n");
      out.write("	        el.innerHTML = i;\r\n");
      out.write("	\r\n");
      out.write("	        if (i===pagination.current) {\r\n");
      out.write("	            el.className = 'on';\r\n");
      out.write("	        } else {\r\n");
      out.write("	            el.onclick = (function(i) {\r\n");
      out.write("	                return function() {\r\n");
      out.write("	                    pagination.gotoPage(i);\r\n");
      out.write("	                }\r\n");
      out.write("	            })(i);\r\n");
      out.write("	        }\r\n");
      out.write("	\r\n");
      out.write("	        fragment.appendChild(el);\r\n");
      out.write("	    }\r\n");
      out.write("	    paginationEl.appendChild(fragment);\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	// 검색결과 목록 또는 마커를 클릭했을 때 호출되는 함수입니다\r\n");
      out.write("	// 인포윈도우에 장소명을 표시합니다\r\n");
      out.write("	function displayInfowindow(marker, title) {\r\n");
      out.write("	    var content = '<div style=\"padding:5px;z-index:1;\">' + title + '</div>';\r\n");
      out.write("	\r\n");
      out.write("	    infowindow.setContent(content);\r\n");
      out.write("	    infowindow.open(map, marker);\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	 // 검색결과 목록의 자식 Element를 제거하는 함수입니다\r\n");
      out.write("	function removeAllChildNods(el) {   \r\n");
      out.write("	    while (el.hasChildNodes()) {\r\n");
      out.write("	        el.removeChild (el.lastChild);\r\n");
      out.write("	    }\r\n");
      out.write("	}\r\n");
      out.write("</script>\r\n");
      out.write("<script>\r\n");
      out.write("	$(\"#btnDone\").click(function() {\r\n");
      out.write("		if(!$(\"#boardCate\").val()) {\r\n");
      out.write("			alert(\"카테고리를 선택해주세요.\");\r\n");
      out.write("			return false;\r\n");
      out.write("		}\r\n");
      out.write("		if(!$(\"#boardTitle\").val()) {\r\n");
      out.write("			alert(\"제목을 입력해주세요.\");\r\n");
      out.write("			$(\"#boardTitle\").focus();\r\n");
      out.write("			return false;\r\n");
      out.write("		}\r\n");
      out.write("		if($(\"input:radio[name=boardStar]:checked\").length < 1) {\r\n");
      out.write("			alert(\"별점을 선택해주세요.\");\r\n");
      out.write("			return false;\r\n");
      out.write("		}\r\n");
      out.write("		if(!$(\"#boardMain\").val()) {\r\n");
      out.write("			alert(\"내용을 입력해주세요.\");\r\n");
      out.write("			$(\"#boardMain\").focus();\r\n");
      out.write("			return false;\r\n");
      out.write("		}\r\n");
      out.write("		if (!$(\"#boardAddr\").val()) {\r\n");
      out.write("	        alert('지도에 장소를 표시해주세요.');\r\n");
      out.write("	        return false;	    	\r\n");
      out.write("	    }\r\n");
      out.write("	\r\n");
      out.write("	})\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
